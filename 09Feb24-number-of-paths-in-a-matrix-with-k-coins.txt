class Solution {
    long ways = 0;
    int[][][] dp = null;
    
    public int computeWays(int n, int k, int[][] arr, 
                           int row, int col) {
        if( row >= n || col >= n || k < 0 ) return 0;
        if( dp[row][col][k] >= 0  ) return dp[row][col][k]; 
        if( row == n-1 && col == n-1 ) {
            if( k == arr[row][col] ) {
                return dp[row][col][k] = 1;
            }
            return dp[row][col][k] = 0;
        }
        int leftWays = computeWays(n, k-arr[row][col], arr, row, col+1); 
        int rightWays = computeWays(n, k-arr[row][col], arr, row+1, col);
        return dp[row][col][k] = leftWays+rightWays;
    }
    
    long numberOfPath(int n, int k, int [][]arr) {
        // code here
        dp = new int[n][n][k+1];
        for(int i = 0; i < n ; i++ ) {
            for(int j = 0; j < n; j++ ) {
                for(int c = 0; c <= k; c++ ) {
                    dp[i][j][c] = -1;
                }
            }
        }
        computeWays(n, k, arr, 0, 0);
        return dp[0][0][k];    
    }
}